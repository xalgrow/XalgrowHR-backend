using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using XalgrowHR.Models;
using XalgrowHR.Services; // Ensure this using directive is present

namespace XalgrowHR.Controllers // Adjust this to match your application's structure
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly UserService _userService;

        public AuthController(UserService userService)
        {
            _userService = userService;
        }

        // DTO for user login
        public class UserLoginDto
        {
            public string Username { get; set; } = string.Empty;  // Default to an empty string
            public string Password { get; set; } = string.Empty;  // Default to an empty string
        }

        // POST: api/auth/login
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] UserLoginDto user)
        {
            if (user == null || string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Password))
            {
                return BadRequest(new { message = "Username or Password is missing." });
            }

            var authenticatedUser = await _userService.AuthenticateUser(user.Username, user.Password);
            if (authenticatedUser == null)
            {
                return Unauthorized(new { message = "Invalid username or password." });
            }

            var accessToken = GenerateJwtToken(authenticatedUser);
            var refreshToken = GenerateRefreshToken();
            authenticatedUser.RefreshToken = refreshToken;
            authenticatedUser.RefreshTokenExpiryTime = DateTime.UtcNow.AddDays(7); // 7 days expiry

            // Save the refresh token to the database
            await _userService.UpdateUserAsync(authenticatedUser);

            return Ok(new
            {
                Token = accessToken,
                RefreshToken = refreshToken
            });
        }

        // You need to implement these methods
        private string GenerateJwtToken(User user)
        {
            // Your logic to generate JWT token
        }

        private string GenerateRefreshToken()
        {
            // Your logic to generate refresh token
        }
    }
}
